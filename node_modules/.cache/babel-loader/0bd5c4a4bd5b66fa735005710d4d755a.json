{"ast":null,"code":"import _slicedToArray from \"/home/derp/WebStorm/User-Onboarding/user-onboarding/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/derp/WebStorm/User-Onboarding/user-onboarding/src/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nfunction LoginForm({\n  values,\n  errors,\n  touched,\n  isSubmitting,\n  status\n}) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  console.log(users);\n  useEffect(() => {\n    if (status) {\n      setUsers([...users, status]);\n    }\n  }, [status]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"users\"), users.map(user => {\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, user.name), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Name: \", user.name), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Email: \", user.email));\n  }), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, touched.name && errors.name && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, errors.name), React.createElement(Field, {\n    type: \"name\",\n    name: \"name\",\n    placeholder: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, errors.password), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"tos\",\n    checked: values.tos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), \"Accept TOS\"), React.createElement(\"button\", {\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Submit\")));\n}\n\nconst FormikForm = withFormik({\n  mapPropsToValues({\n    email,\n    password,\n    tos,\n    meal\n  }) {\n    return {\n      email: email || \"\",\n      password: password || \"\",\n      tos: tos || false\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Name is required\"),\n    email: Yup.string().email(\"Email not valid\").required(\"Email is required\"),\n    password: Yup.string().min(16, \"Password must be 16 characters or longer\").required(\"Password is required\")\n  }),\n\n  handleSubmit(values, {\n    resetForm,\n    setStatus,\n    setSubmitting\n  }) {\n    axios.post(\"https://reqres.in/api/users_\", values).then(res => {\n      console.log(res.data); // Data was created successfully and logs to console\n\n      setStatus(res.data);\n      resetForm();\n      setSubmitting(false);\n    }).catch(err => {\n      console.log(err); // There was an error creating the data and logs to console\n\n      setSubmitting(false);\n    });\n  }\n\n})(LoginForm);\nexport default FormikForm;\n/*## STEP 4 - Display Returned Data to Screen\n\nWhen you get your data back, you will want to do something with it, right? Let's display a list of users in our app.\n\n- Every time you make a `POST` request, and get that new user data back, update your `users` state with the new user added to the array\n- Render `users` in your app. This can be done in the `Form` component, or you can pass the array down to another component and render the `users` there*/\n\n/*{data: {…}, status: 201, statusText: \"\", headers: {…}, config: {…}, …}\nconfig: {url: \"https://reqres.in/api/users_\", method: \"post\", data: \"{\"email\":\"gabriel.shapiro@gshapiro.com\",\"password\"…dkj\",\"tos\":true,\"meal\":\"silver\",\"name\":\"gabriel\"}\", headers: {…}, transformRequest: Array(1), …}\ndata:\ncreatedAt: \"2019-08-18T18:09:53.466Z\"\nemail: \"gabriel.shapiro@gshapiro.com\"\nid: \"439\"\nmeal: \"silver\"\nname: \"gabriel\"\npassword: \"aslk;djasl;dkjasl;dkj\"\ntos: true\n__proto__: Object\nheaders: {content-type: \"application/json; charset=utf-8\", content-length: \"169\"}\nrequest: XMLHttpRequest {onreadystatechange: ƒ, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}\nstatus: 201\nstatusText: \"\"\n__proto__: Object*/","map":{"version":3,"sources":["/home/derp/WebStorm/User-Onboarding/user-onboarding/src/Form.js"],"names":["React","useState","useEffect","withFormik","Form","Field","Yup","axios","LoginForm","values","errors","touched","isSubmitting","status","users","setUsers","console","log","map","user","name","email","password","tos","FormikForm","mapPropsToValues","meal","validationSchema","object","shape","string","required","min","handleSubmit","resetForm","setStatus","setSubmitting","post","then","res","data","catch","err"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {withFormik, Form, Field} from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nfunction LoginForm({values, errors, touched, isSubmitting, status}) {\n    const [users, setUsers] = useState([]);\n  console.log(users);\n\n  useEffect(() => {\n    if (status) {\n      setUsers([...users, status]);\n    }\n  }, [status]);\n    return (\n        <div>\n            <p>users</p>\n            {\n                users.map(user => {\n                    <div>\n                    <h1>{user.name}</h1>\n                    <li>Name: {user.name}</li>\n                    <li>Email: {user.email}</li>\n                        </div>\n                })\n            }\n        <Form>\n            <div>\n                {touched.name && errors.name && <p>{errors.name}</p>}\n                <Field type=\"name\" name=\"name\" placeholder=\"Name\"/>\n            </div>\n            <div>\n                {touched.email && errors.email && <p>{errors.email}</p>}\n                <Field type=\"email\" name=\"email\" placeholder=\"Email\"/>\n            </div>\n            <div>\n                {touched.password && errors.password && <p>{errors.password}</p>}\n                <Field type=\"password\" name=\"password\" placeholder=\"Password\"/>\n            </div>\n            <label>\n                <Field type=\"checkbox\" name=\"tos\" checked={values.tos}/>\n                Accept TOS\n            </label>\n            <button disabled={isSubmitting}>Submit</button>\n        </Form>\n            </div>\n    );\n}\n\nconst FormikForm = withFormik({\n\n\n    mapPropsToValues({email, password, tos, meal}) {\n        return {\n            email: email || \"\",\n            password: password || \"\",\n            tos: tos || false,\n        };\n    },\n    validationSchema: Yup.object().shape({\n        name: Yup.string()\n            .required(\"Name is required\"),\n        email: Yup.string()\n            .email(\"Email not valid\")\n            .required(\"Email is required\"),\n        password: Yup.string()\n            .min(16, \"Password must be 16 characters or longer\")\n            .required(\"Password is required\")\n    }),\n    handleSubmit(values, {resetForm, setStatus, setSubmitting}) {\n\n        axios\n            .post(\"https://reqres.in/api/users_\", values)\n            .then(res => {\n                console.log(res.data); // Data was created successfully and logs to console\n                setStatus(res.data);\n                resetForm();\n                setSubmitting(false);\n            })\n            .catch(err => {\n                console.log(err); // There was an error creating the data and logs to console\n                setSubmitting(false);\n            });\n\n    }\n})(LoginForm);\n\nexport default FormikForm;\n\n/*## STEP 4 - Display Returned Data to Screen\n\nWhen you get your data back, you will want to do something with it, right? Let's display a list of users in our app.\n\n- Every time you make a `POST` request, and get that new user data back, update your `users` state with the new user added to the array\n- Render `users` in your app. This can be done in the `Form` component, or you can pass the array down to another component and render the `users` there*/\n\n/*{data: {…}, status: 201, statusText: \"\", headers: {…}, config: {…}, …}\nconfig: {url: \"https://reqres.in/api/users_\", method: \"post\", data: \"{\"email\":\"gabriel.shapiro@gshapiro.com\",\"password\"…dkj\",\"tos\":true,\"meal\":\"silver\",\"name\":\"gabriel\"}\", headers: {…}, transformRequest: Array(1), …}\ndata:\ncreatedAt: \"2019-08-18T18:09:53.466Z\"\nemail: \"gabriel.shapiro@gshapiro.com\"\nid: \"439\"\nmeal: \"silver\"\nname: \"gabriel\"\npassword: \"aslk;djasl;dkjasl;dkj\"\ntos: true\n__proto__: Object\nheaders: {content-type: \"application/json; charset=utf-8\", content-length: \"169\"}\nrequest: XMLHttpRequest {onreadystatechange: ƒ, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}\nstatus: 201\nstatusText: \"\"\n__proto__: Object*/\n\n"]},"metadata":{},"sourceType":"module"}