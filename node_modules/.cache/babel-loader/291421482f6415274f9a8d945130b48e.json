{"ast":null,"code":"import _slicedToArray from \"/home/derp/WebStorm/User-Onboarding/user-onboarding/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/derp/WebStorm/User-Onboarding/user-onboarding/src/Form.js\";\nimport React, { useState } from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nfunction LoginForm({\n  values,\n  errors,\n  touched,\n  isSubmitting\n}) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, touched.name && errors.name && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, errors.name), React.createElement(Field, {\n    type: \"name\",\n    name: \"name\",\n    placeholder: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, errors.password), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"tos\",\n    checked: values.tos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), \"Accept TOS\"), React.createElement(Field, {\n    component: \"select\",\n    name: \"meal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"gold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Gold\"), React.createElement(\"option\", {\n    value: \"silver\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Silver\"), React.createElement(\"option\", {\n    value: \"platinum\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Platinum\")), React.createElement(\"button\", {\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Submit\"));\n}\n\nconst FormikForm = withFormik({\n  mapPropsToValues({\n    email,\n    password,\n    tos,\n    meal\n  }) {\n    return {\n      email: email || \"\",\n      password: password || \"\",\n      tos: tos || false,\n      meal: meal || \"silver\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Name is required\"),\n    email: Yup.string().email(\"Email not valid\").required(\"Email is required\"),\n    password: Yup.string().min(16, \"Password must be 16 characters or longer\").required(\"Password is required\")\n  }),\n\n  handleSubmit(values, {\n    resetForm,\n    setErrors,\n    setSubmitting\n  }) {\n    axios.post(\"https://reqres.in/api/users_\", values).then(res => {\n      console.log(res); // Data was created successfully and logs to console\n\n      resetForm();\n      setSubmitting(false);\n    }).catch(err => {\n      console.log(err); // There was an error creating the data and logs to console\n\n      setSubmitting(false);\n    });\n  }\n\n})(LoginForm);\nexport default FormikForm;\n/*## STEP 4 - Display Returned Data to Screen\n\nWhen you get your data back, you will want to do something with it, right? Let's display a list of users in our app.\n\n- Set up a state property called `users` that is initialized with an empty array\n- Every time you make a `POST` request, and get that new user data back, update your `users` state with the new user added to the array\n- Render `users` in your app. This can be done in the `Form` component, or you can pass the array down to another component and render the `users` there*/","map":{"version":3,"sources":["/home/derp/WebStorm/User-Onboarding/user-onboarding/src/Form.js"],"names":["React","useState","withFormik","Form","Field","Yup","axios","LoginForm","values","errors","touched","isSubmitting","users","setUsers","name","email","password","tos","FormikForm","mapPropsToValues","meal","validationSchema","object","shape","string","required","min","handleSubmit","resetForm","setErrors","setSubmitting","post","then","res","console","log","catch","err"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nfunction LoginForm({ values, errors, touched, isSubmitting }) {\n    const [users, setUsers] = useState([]);\n\n  return (\n    <Form>\n      <div>\n        {touched.name && errors.name && <p>{errors.name}</p>}\n        <Field type=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n        <div>\n        {touched.email && errors.email && <p>{errors.email}</p>}\n        <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n      </div>\n      <div>\n        {touched.password && errors.password && <p>{errors.password}</p>}\n        <Field type=\"password\" name=\"password\" placeholder=\"Password\" />\n      </div>\n      <label>\n        <Field type=\"checkbox\" name=\"tos\" checked={values.tos} />\n        Accept TOS\n      </label>\n      <Field component=\"select\" name=\"meal\">\n        <option value=\"gold\">Gold</option>\n        <option value=\"silver\">Silver</option>\n        <option value=\"platinum\">Platinum</option>\n      </Field>\n      <button disabled={isSubmitting}>Submit</button>\n    </Form>\n  );\n}\n\nconst FormikForm = withFormik({\n  mapPropsToValues({ email, password, tos, meal }) {\n    return {\n      email: email || \"\",\n      password: password || \"\",\n      tos: tos || false,\n      meal: meal || \"silver\"\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string()\n      .required(\"Name is required\"),\n      email: Yup.string()\n      .email(\"Email not valid\")\n      .required(\"Email is required\"),\n    password: Yup.string()\n      .min(16, \"Password must be 16 characters or longer\")\n      .required(\"Password is required\")\n  }),\n  handleSubmit(values, { resetForm, setErrors, setSubmitting }) {\n\n      axios\n        .post(\"https://reqres.in/api/users_\", values)\n        .then(res => {\n          console.log(res); // Data was created successfully and logs to console\n          resetForm();\n          setSubmitting(false);\n        })\n        .catch(err => {\n          console.log(err); // There was an error creating the data and logs to console\n          setSubmitting(false);\n        });\n\n  }\n})(LoginForm);\n\nexport default FormikForm;\n\n/*## STEP 4 - Display Returned Data to Screen\n\nWhen you get your data back, you will want to do something with it, right? Let's display a list of users in our app.\n\n- Set up a state property called `users` that is initialized with an empty array\n- Every time you make a `POST` request, and get that new user data back, update your `users` state with the new user added to the array\n- Render `users` in your app. This can be done in the `Form` component, or you can pass the array down to another component and render the `users` there*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}